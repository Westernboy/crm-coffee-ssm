<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 1.开启SpringMVC注解模式 -->
    <!-- 简化配置：
    1>自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter
    2>提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持
    -->
    <mvc:annotation-driven/>
    <!--2. 由子容器扫描装配了@Service 注解的实例。
spring的context是父子容器，由ServletContextListener
加载spring配置文件产生的是父容器，springMVC加载配置文件产生的是子容器，
子容器对Controller进行扫描装配时装配了@Service注解的实例
(@Controller 实例依赖@Service实例)，
而该实例理应由父容器进行初始化以保证事务的增强处理，
所以此时得到的将是原样的Service（没有经过事务加强处理，故而没有事务处理能力)
-->
    <context:component-scan base-package="com.coffee.ssm">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>
    <!-- 3.静态资源默认servlet配置
     1> 加入对静态资源的处理：js,gif,png,pdf,word
   3>允许使用"/"做整体映射
-->
    <mvc:default-servlet-handler/>
    <!-- 或者使用mvc标签-->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <!--指定返回json格式的数据,指定字符集-->
                <property name="supportedMediaTypes" value="application/json;charset=UTF-8"/>
                <property name="fastJsonConfig">
                    <bean class="com.alibaba.fastjson.support.config.FastJsonConfig">
                        <!--指定默认输出的日期格式-->
                        <property name="dateFormat" value="yyyy-MM-dd HH:mm:ss"/>
                        <!--序列化对象配置 可选-->
                        <property name="serializerFeatures">
                            <array>
                                <!--输出key时是否使用双引号，默认为true-->
                                <value>QuoteFieldNames</value>
                                <!--将JavaBean序列化为带格式的JSON文本-->
                                <value>PrettyFormat</value>
                                <!--是否输出值为null的字段，默认为false-->
                                <value>WriteMapNullValue</value>
                                <!--List字段若为null，输出[]，而非null-->
                                <value>WriteNullListAsEmpty</value>
                                <!--数值字段若为null，输出0，而非null-->
                                <value>WriteNullNumberAsZero</value>
                                <!--字符类型字段若为null，输出”“，而非null-->
                                <value>WriteNullStringAsEmpty</value>
                                <!--Boolean字段若为null，输出false，而非null-->
                                <value>WriteNullBooleanAsFalse</value>
                                <!--日期格式化-->
                                <value>WriteDateUseDateFormat</value>
                            </array>
                        </property>
                    </bean>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!-- 5.配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />
    </bean>
</beans>